
Non-Blocking mode makes it possible for a thread to read or write without blocking. 

Non-Blocking mode doesn't let an application determine if it can perform an operation such system calls acccept(), read(), write etc without actually performing the operation. 

E.g - If the non-blocking read operation succeeds, there are two important events
a. Aplication learns the read operation is possible.
b. Application also has read data that must be managed. 

This duality prevents seperating the code that checks from stream readiness (First event) from the actual data procesing code without making the code significantly complicated.

Result - Non-Blocking mode is the foundation for readiness selection (select() system call) which offloads to the Operating System the work involved in checking for I/O stream readiness to perform read, write and other operations which was mentioned as first event without actually performing the operations. 

E.g - If the non-blocking read operation succeeds, there are two important events with readiness selection
a. Aplication learns the read operation is possible no longer true and offloaded to the OS to determine if the operation is possible.
b. Application has read data that must be managed after stream readiness notifies the operation is possible.

The duality is no longer valid due to readiness selection implemented in the OS Kernel.

OS is instrcuted to observe a group of streams and return some indication of which streams are ready to perform a specific operation such as read or operation such as read and write. This capability lets a thread multiplex large number of active streams by using readiness information provided by the operating system. 

Selector - is an object that maintains a set of channels that it examines to determine which channels are ready for reading, writing however the actual work is delegated to system call.

The ability to check a channel for readiness without having to wait when something isn't ready such as bytes are unavaible for reading and without also having to perform the operation while checking is the key to scalability. A single thread can manage a huge number of channels.

